/*
 * Reffueld API
 * **Reffueld's API** 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.reffueld.client.api;

import com.reffueld.client.ApiCallback;
import com.reffueld.client.ApiClient;
import com.reffueld.client.ApiException;
import com.reffueld.client.ApiResponse;
import com.reffueld.client.Configuration;
import com.reffueld.client.Pair;
import com.reffueld.client.ProgressRequestBody;
import com.reffueld.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.reffueld.client.model.CouponTransactionListResponse;
import com.reffueld.client.model.CouponTransactionResponse;
import org.joda.time.DateTime;
import com.reffueld.client.model.InlineResponse400;
import com.reffueld.client.model.InlineResponse401;
import com.reffueld.client.model.InlineResponse404;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CouponTransactionApi {
    private ApiClient apiClient;

    public CouponTransactionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CouponTransactionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getCouponTransactionById */
    private com.squareup.okhttp.Call getCouponTransactionByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transaction/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKeySecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCouponTransactionByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCouponTransactionById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCouponTransactionByIdCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * coupon transaction
     * @param id Unique ID of the user requested (required)
     * @return CouponTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponTransactionResponse getCouponTransactionById(String id) throws ApiException {
        ApiResponse<CouponTransactionResponse> resp = getCouponTransactionByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * coupon transaction
     * @param id Unique ID of the user requested (required)
     * @return ApiResponse&lt;CouponTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponTransactionResponse> getCouponTransactionByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getCouponTransactionByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<CouponTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * coupon transaction
     * @param id Unique ID of the user requested (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCouponTransactionByIdAsync(String id, final ApiCallback<CouponTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCouponTransactionByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCouponTransactions */
    private com.squareup.okhttp.Call getCouponTransactionsCall(DateTime createdBefore, DateTime createdAfter, String txType, String couponCode, String userId, Integer amountLt, Integer amountGt, Integer limit, Integer offset, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transaction".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "created_before", createdBefore));
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "created_after", createdAfter));
        if (txType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tx_type", txType));
        if (couponCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "coupon_code", couponCode));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "user_id", userId));
        if (amountLt != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "amount_lt", amountLt));
        if (amountGt != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "amount_gt", amountGt));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKeySecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCouponTransactionsValidateBeforeCall(DateTime createdBefore, DateTime createdAfter, String txType, String couponCode, String userId, Integer amountLt, Integer amountGt, Integer limit, Integer offset, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getCouponTransactionsCall(createdBefore, createdAfter, txType, couponCode, userId, amountLt, amountGt, limit, offset, cursor, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * coupon transaction
     * @param createdBefore  (optional)
     * @param createdAfter  (optional)
     * @param txType  (optional)
     * @param couponCode  (optional)
     * @param userId  (optional)
     * @param amountLt  (optional)
     * @param amountGt  (optional)
     * @param limit Number of items returned in the list (optional, default to 10)
     * @param offset Points to the n-th object in the database to start the returned list with (optional)
     * @param cursor A pointer to the first item on the list, returned by the previous query (optional)
     * @return CouponTransactionListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponTransactionListResponse getCouponTransactions(DateTime createdBefore, DateTime createdAfter, String txType, String couponCode, String userId, Integer amountLt, Integer amountGt, Integer limit, Integer offset, String cursor) throws ApiException {
        ApiResponse<CouponTransactionListResponse> resp = getCouponTransactionsWithHttpInfo(createdBefore, createdAfter, txType, couponCode, userId, amountLt, amountGt, limit, offset, cursor);
        return resp.getData();
    }

    /**
     * 
     * coupon transaction
     * @param createdBefore  (optional)
     * @param createdAfter  (optional)
     * @param txType  (optional)
     * @param couponCode  (optional)
     * @param userId  (optional)
     * @param amountLt  (optional)
     * @param amountGt  (optional)
     * @param limit Number of items returned in the list (optional, default to 10)
     * @param offset Points to the n-th object in the database to start the returned list with (optional)
     * @param cursor A pointer to the first item on the list, returned by the previous query (optional)
     * @return ApiResponse&lt;CouponTransactionListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponTransactionListResponse> getCouponTransactionsWithHttpInfo(DateTime createdBefore, DateTime createdAfter, String txType, String couponCode, String userId, Integer amountLt, Integer amountGt, Integer limit, Integer offset, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = getCouponTransactionsValidateBeforeCall(createdBefore, createdAfter, txType, couponCode, userId, amountLt, amountGt, limit, offset, cursor, null, null);
        Type localVarReturnType = new TypeToken<CouponTransactionListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * coupon transaction
     * @param createdBefore  (optional)
     * @param createdAfter  (optional)
     * @param txType  (optional)
     * @param couponCode  (optional)
     * @param userId  (optional)
     * @param amountLt  (optional)
     * @param amountGt  (optional)
     * @param limit Number of items returned in the list (optional, default to 10)
     * @param offset Points to the n-th object in the database to start the returned list with (optional)
     * @param cursor A pointer to the first item on the list, returned by the previous query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCouponTransactionsAsync(DateTime createdBefore, DateTime createdAfter, String txType, String couponCode, String userId, Integer amountLt, Integer amountGt, Integer limit, Integer offset, String cursor, final ApiCallback<CouponTransactionListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCouponTransactionsValidateBeforeCall(createdBefore, createdAfter, txType, couponCode, userId, amountLt, amountGt, limit, offset, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponTransactionListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
