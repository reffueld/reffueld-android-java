/*
 * Reffueld API
 * **Reffueld's API** 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.reffueld.client.api;

import com.reffueld.client.ApiCallback;
import com.reffueld.client.ApiClient;
import com.reffueld.client.ApiException;
import com.reffueld.client.ApiResponse;
import com.reffueld.client.Configuration;
import com.reffueld.client.Pair;
import com.reffueld.client.ProgressRequestBody;
import com.reffueld.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.reffueld.client.model.CouponTransactionResponse;
import com.reffueld.client.model.CouponUserClaimRequest;
import com.reffueld.client.model.CouponUserCreateRequest;
import com.reffueld.client.model.CouponUserListResponse;
import com.reffueld.client.model.CouponUserReciprocateRequest;
import com.reffueld.client.model.CouponUserResponse;
import com.reffueld.client.model.CouponUserTransactionRequest;
import com.reffueld.client.model.CouponUserUpdateRequest;
import org.joda.time.DateTime;
import com.reffueld.client.model.InlineResponse400;
import com.reffueld.client.model.InlineResponse401;
import com.reffueld.client.model.InlineResponse404;
import com.reffueld.client.model.InlineResponse409;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CouponUserApi {
    private ApiClient apiClient;

    public CouponUserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CouponUserApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for claimCodeForUser */
    private com.squareup.okhttp.Call claimCodeForUserCall(String id, String code, CouponUserClaimRequest body, String X_IDEMPOTENCY_KEY, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/user/{id}/claim/{code}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_IDEMPOTENCY_KEY != null)
        localVarHeaderParams.put("X-IDEMPOTENCY-KEY", apiClient.parameterToString(X_IDEMPOTENCY_KEY));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKeySecurity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call claimCodeForUserValidateBeforeCall(String id, String code, CouponUserClaimRequest body, String X_IDEMPOTENCY_KEY, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling claimCodeForUser(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling claimCodeForUser(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling claimCodeForUser(Async)");
        }
        
        
        com.squareup.okhttp.Call call = claimCodeForUserCall(id, code, body, X_IDEMPOTENCY_KEY, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Claim a single code for a specific user, resulting in a CLAIM type transaction.
     * @param id Unique ID of the user requested (required)
     * @param code Unique coupon code (required)
     * @param body Transaction object (required)
     * @param X_IDEMPOTENCY_KEY The unique value of the key identifies the request (optional)
     * @return CouponTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponTransactionResponse claimCodeForUser(String id, String code, CouponUserClaimRequest body, String X_IDEMPOTENCY_KEY) throws ApiException {
        ApiResponse<CouponTransactionResponse> resp = claimCodeForUserWithHttpInfo(id, code, body, X_IDEMPOTENCY_KEY);
        return resp.getData();
    }

    /**
     * 
     * Claim a single code for a specific user, resulting in a CLAIM type transaction.
     * @param id Unique ID of the user requested (required)
     * @param code Unique coupon code (required)
     * @param body Transaction object (required)
     * @param X_IDEMPOTENCY_KEY The unique value of the key identifies the request (optional)
     * @return ApiResponse&lt;CouponTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponTransactionResponse> claimCodeForUserWithHttpInfo(String id, String code, CouponUserClaimRequest body, String X_IDEMPOTENCY_KEY) throws ApiException {
        com.squareup.okhttp.Call call = claimCodeForUserValidateBeforeCall(id, code, body, X_IDEMPOTENCY_KEY, null, null);
        Type localVarReturnType = new TypeToken<CouponTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Claim a single code for a specific user, resulting in a CLAIM type transaction.
     * @param id Unique ID of the user requested (required)
     * @param code Unique coupon code (required)
     * @param body Transaction object (required)
     * @param X_IDEMPOTENCY_KEY The unique value of the key identifies the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call claimCodeForUserAsync(String id, String code, CouponUserClaimRequest body, String X_IDEMPOTENCY_KEY, final ApiCallback<CouponTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = claimCodeForUserValidateBeforeCall(id, code, body, X_IDEMPOTENCY_KEY, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createUser */
    private com.squareup.okhttp.Call createUserCall(CouponUserCreateRequest body, String X_IDEMPOTENCY_KEY, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/user".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_IDEMPOTENCY_KEY != null)
        localVarHeaderParams.put("X-IDEMPOTENCY-KEY", apiClient.parameterToString(X_IDEMPOTENCY_KEY));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKeySecurity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserValidateBeforeCall(CouponUserCreateRequest body, String X_IDEMPOTENCY_KEY, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createUser(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createUserCall(body, X_IDEMPOTENCY_KEY, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Create a new user.
     * @param body User object (required)
     * @param X_IDEMPOTENCY_KEY The unique value of the key identifies the request (optional)
     * @return CouponUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponUserResponse createUser(CouponUserCreateRequest body, String X_IDEMPOTENCY_KEY) throws ApiException {
        ApiResponse<CouponUserResponse> resp = createUserWithHttpInfo(body, X_IDEMPOTENCY_KEY);
        return resp.getData();
    }

    /**
     * 
     * Create a new user.
     * @param body User object (required)
     * @param X_IDEMPOTENCY_KEY The unique value of the key identifies the request (optional)
     * @return ApiResponse&lt;CouponUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponUserResponse> createUserWithHttpInfo(CouponUserCreateRequest body, String X_IDEMPOTENCY_KEY) throws ApiException {
        com.squareup.okhttp.Call call = createUserValidateBeforeCall(body, X_IDEMPOTENCY_KEY, null, null);
        Type localVarReturnType = new TypeToken<CouponUserResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new user.
     * @param body User object (required)
     * @param X_IDEMPOTENCY_KEY The unique value of the key identifies the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserAsync(CouponUserCreateRequest body, String X_IDEMPOTENCY_KEY, final ApiCallback<CouponUserResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserValidateBeforeCall(body, X_IDEMPOTENCY_KEY, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponUserResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createUserTransaction */
    private com.squareup.okhttp.Call createUserTransactionCall(String id, String transactionType, CouponUserTransactionRequest body, String X_IDEMPOTENCY_KEY, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/user/{id}/{transaction_type}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "transaction_type" + "\\}", apiClient.escapeString(transactionType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_IDEMPOTENCY_KEY != null)
        localVarHeaderParams.put("X-IDEMPOTENCY-KEY", apiClient.parameterToString(X_IDEMPOTENCY_KEY));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKeySecurity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserTransactionValidateBeforeCall(String id, String transactionType, CouponUserTransactionRequest body, String X_IDEMPOTENCY_KEY, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createUserTransaction(Async)");
        }
        
        // verify the required parameter 'transactionType' is set
        if (transactionType == null) {
            throw new ApiException("Missing the required parameter 'transactionType' when calling createUserTransaction(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createUserTransaction(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createUserTransactionCall(id, transactionType, body, X_IDEMPOTENCY_KEY, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * A variety of balance transactions are supported, each altering the user&#39;s balance in different ways.
     * @param id Unique ID of the user requested (required)
     * @param transactionType Type of transaction to perform (required)
     * @param body Transaction object (required)
     * @param X_IDEMPOTENCY_KEY The unique value of the key identifies the request (optional)
     * @return CouponTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponTransactionResponse createUserTransaction(String id, String transactionType, CouponUserTransactionRequest body, String X_IDEMPOTENCY_KEY) throws ApiException {
        ApiResponse<CouponTransactionResponse> resp = createUserTransactionWithHttpInfo(id, transactionType, body, X_IDEMPOTENCY_KEY);
        return resp.getData();
    }

    /**
     * 
     * A variety of balance transactions are supported, each altering the user&#39;s balance in different ways.
     * @param id Unique ID of the user requested (required)
     * @param transactionType Type of transaction to perform (required)
     * @param body Transaction object (required)
     * @param X_IDEMPOTENCY_KEY The unique value of the key identifies the request (optional)
     * @return ApiResponse&lt;CouponTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponTransactionResponse> createUserTransactionWithHttpInfo(String id, String transactionType, CouponUserTransactionRequest body, String X_IDEMPOTENCY_KEY) throws ApiException {
        com.squareup.okhttp.Call call = createUserTransactionValidateBeforeCall(id, transactionType, body, X_IDEMPOTENCY_KEY, null, null);
        Type localVarReturnType = new TypeToken<CouponTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A variety of balance transactions are supported, each altering the user&#39;s balance in different ways.
     * @param id Unique ID of the user requested (required)
     * @param transactionType Type of transaction to perform (required)
     * @param body Transaction object (required)
     * @param X_IDEMPOTENCY_KEY The unique value of the key identifies the request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserTransactionAsync(String id, String transactionType, CouponUserTransactionRequest body, String X_IDEMPOTENCY_KEY, final ApiCallback<CouponTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserTransactionValidateBeforeCall(id, transactionType, body, X_IDEMPOTENCY_KEY, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserById */
    private com.squareup.okhttp.Call getUserByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKeySecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUserById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserByIdCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve the entire user object by its ID.
     * @param id Unique ID of the user requested (required)
     * @return CouponUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponUserResponse getUserById(String id) throws ApiException {
        ApiResponse<CouponUserResponse> resp = getUserByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the entire user object by its ID.
     * @param id Unique ID of the user requested (required)
     * @return ApiResponse&lt;CouponUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponUserResponse> getUserByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getUserByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<CouponUserResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the entire user object by its ID.
     * @param id Unique ID of the user requested (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserByIdAsync(String id, final ApiCallback<CouponUserResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponUserResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUsers */
    private com.squareup.okhttp.Call getUsersCall(Boolean enabled, String role, String tag, DateTime createdBefore, DateTime createdAfter, Integer balanceLt, Integer balanceGt, DateTime lastTransactionBefore, DateTime lastTransactionAfter, DateTime lastClaimBefore, DateTime lastClaimAfter, Integer limit, Integer offset, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (enabled != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "enabled", enabled));
        if (role != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "role", role));
        if (tag != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tag", tag));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "created_before", createdBefore));
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "created_after", createdAfter));
        if (balanceLt != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "balance_lt", balanceLt));
        if (balanceGt != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "balance_gt", balanceGt));
        if (lastTransactionBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "last_transaction_before", lastTransactionBefore));
        if (lastTransactionAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "last_transaction_after", lastTransactionAfter));
        if (lastClaimBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "last_claim_before", lastClaimBefore));
        if (lastClaimAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "last_claim_after", lastClaimAfter));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKeySecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsersValidateBeforeCall(Boolean enabled, String role, String tag, DateTime createdBefore, DateTime createdAfter, Integer balanceLt, Integer balanceGt, DateTime lastTransactionBefore, DateTime lastTransactionAfter, DateTime lastClaimBefore, DateTime lastClaimAfter, Integer limit, Integer offset, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getUsersCall(enabled, role, tag, createdBefore, createdAfter, balanceLt, balanceGt, lastTransactionBefore, lastTransactionAfter, lastClaimBefore, lastClaimAfter, limit, offset, cursor, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve a list of users with all their details.
     * @param enabled  (optional)
     * @param role  (optional)
     * @param tag  (optional)
     * @param createdBefore  (optional)
     * @param createdAfter  (optional)
     * @param balanceLt  (optional)
     * @param balanceGt  (optional)
     * @param lastTransactionBefore  (optional)
     * @param lastTransactionAfter  (optional)
     * @param lastClaimBefore  (optional)
     * @param lastClaimAfter  (optional)
     * @param limit Number of items returned in the list (optional, default to 10)
     * @param offset Points to the n-th object in the database to start the returned list with (optional)
     * @param cursor A pointer to the first item on the list, returned by the previous query (optional)
     * @return CouponUserListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponUserListResponse getUsers(Boolean enabled, String role, String tag, DateTime createdBefore, DateTime createdAfter, Integer balanceLt, Integer balanceGt, DateTime lastTransactionBefore, DateTime lastTransactionAfter, DateTime lastClaimBefore, DateTime lastClaimAfter, Integer limit, Integer offset, String cursor) throws ApiException {
        ApiResponse<CouponUserListResponse> resp = getUsersWithHttpInfo(enabled, role, tag, createdBefore, createdAfter, balanceLt, balanceGt, lastTransactionBefore, lastTransactionAfter, lastClaimBefore, lastClaimAfter, limit, offset, cursor);
        return resp.getData();
    }

    /**
     * 
     * Retrieve a list of users with all their details.
     * @param enabled  (optional)
     * @param role  (optional)
     * @param tag  (optional)
     * @param createdBefore  (optional)
     * @param createdAfter  (optional)
     * @param balanceLt  (optional)
     * @param balanceGt  (optional)
     * @param lastTransactionBefore  (optional)
     * @param lastTransactionAfter  (optional)
     * @param lastClaimBefore  (optional)
     * @param lastClaimAfter  (optional)
     * @param limit Number of items returned in the list (optional, default to 10)
     * @param offset Points to the n-th object in the database to start the returned list with (optional)
     * @param cursor A pointer to the first item on the list, returned by the previous query (optional)
     * @return ApiResponse&lt;CouponUserListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponUserListResponse> getUsersWithHttpInfo(Boolean enabled, String role, String tag, DateTime createdBefore, DateTime createdAfter, Integer balanceLt, Integer balanceGt, DateTime lastTransactionBefore, DateTime lastTransactionAfter, DateTime lastClaimBefore, DateTime lastClaimAfter, Integer limit, Integer offset, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = getUsersValidateBeforeCall(enabled, role, tag, createdBefore, createdAfter, balanceLt, balanceGt, lastTransactionBefore, lastTransactionAfter, lastClaimBefore, lastClaimAfter, limit, offset, cursor, null, null);
        Type localVarReturnType = new TypeToken<CouponUserListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of users with all their details.
     * @param enabled  (optional)
     * @param role  (optional)
     * @param tag  (optional)
     * @param createdBefore  (optional)
     * @param createdAfter  (optional)
     * @param balanceLt  (optional)
     * @param balanceGt  (optional)
     * @param lastTransactionBefore  (optional)
     * @param lastTransactionAfter  (optional)
     * @param lastClaimBefore  (optional)
     * @param lastClaimAfter  (optional)
     * @param limit Number of items returned in the list (optional, default to 10)
     * @param offset Points to the n-th object in the database to start the returned list with (optional)
     * @param cursor A pointer to the first item on the list, returned by the previous query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsersAsync(Boolean enabled, String role, String tag, DateTime createdBefore, DateTime createdAfter, Integer balanceLt, Integer balanceGt, DateTime lastTransactionBefore, DateTime lastTransactionAfter, DateTime lastClaimBefore, DateTime lastClaimAfter, Integer limit, Integer offset, String cursor, final ApiCallback<CouponUserListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsersValidateBeforeCall(enabled, role, tag, createdBefore, createdAfter, balanceLt, balanceGt, lastTransactionBefore, lastTransactionAfter, lastClaimBefore, lastClaimAfter, limit, offset, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponUserListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for reciprocateUserTransaction */
    private com.squareup.okhttp.Call reciprocateUserTransactionCall(String id, CouponUserReciprocateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/user/{id}/reciprocate".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKeySecurity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reciprocateUserTransactionValidateBeforeCall(String id, CouponUserReciprocateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reciprocateUserTransaction(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling reciprocateUserTransaction(Async)");
        }
        
        
        com.squareup.okhttp.Call call = reciprocateUserTransactionCall(id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Claim a single code for a specific user, resulting in a CLAIM type transaction.
     * @param id Unique ID of the user requested (required)
     * @param body Transaction object (required)
     * @return CouponTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponTransactionResponse reciprocateUserTransaction(String id, CouponUserReciprocateRequest body) throws ApiException {
        ApiResponse<CouponTransactionResponse> resp = reciprocateUserTransactionWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * 
     * Claim a single code for a specific user, resulting in a CLAIM type transaction.
     * @param id Unique ID of the user requested (required)
     * @param body Transaction object (required)
     * @return ApiResponse&lt;CouponTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponTransactionResponse> reciprocateUserTransactionWithHttpInfo(String id, CouponUserReciprocateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = reciprocateUserTransactionValidateBeforeCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<CouponTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Claim a single code for a specific user, resulting in a CLAIM type transaction.
     * @param id Unique ID of the user requested (required)
     * @param body Transaction object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reciprocateUserTransactionAsync(String id, CouponUserReciprocateRequest body, final ApiCallback<CouponTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reciprocateUserTransactionValidateBeforeCall(id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateUser */
    private com.squareup.okhttp.Call updateUserCall(String id, CouponUserUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/user/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKeySecurity" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserValidateBeforeCall(String id, CouponUserUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateUser(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateUser(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateUserCall(id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update user details for a single user.
     * @param id Unique ID of the user requested (required)
     * @param body User object (required)
     * @return CouponUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponUserResponse updateUser(String id, CouponUserUpdateRequest body) throws ApiException {
        ApiResponse<CouponUserResponse> resp = updateUserWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * 
     * Update user details for a single user.
     * @param id Unique ID of the user requested (required)
     * @param body User object (required)
     * @return ApiResponse&lt;CouponUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponUserResponse> updateUserWithHttpInfo(String id, CouponUserUpdateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateUserValidateBeforeCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<CouponUserResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update user details for a single user.
     * @param id Unique ID of the user requested (required)
     * @param body User object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserAsync(String id, CouponUserUpdateRequest body, final ApiCallback<CouponUserResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserValidateBeforeCall(id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponUserResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
