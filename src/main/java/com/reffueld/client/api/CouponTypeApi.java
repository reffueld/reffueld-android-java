/*
 * Reffueld API
 * **Reffueld's API** 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.reffueld.client.api;

import com.reffueld.client.ApiCallback;
import com.reffueld.client.ApiClient;
import com.reffueld.client.ApiException;
import com.reffueld.client.ApiResponse;
import com.reffueld.client.Configuration;
import com.reffueld.client.Pair;
import com.reffueld.client.ProgressRequestBody;
import com.reffueld.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.reffueld.client.model.CodeListResponse;
import com.reffueld.client.model.CouponTypeIssueRequest;
import com.reffueld.client.model.CouponTypeListResponse;
import com.reffueld.client.model.CouponTypeResponse;
import com.reffueld.client.model.CouponTypeUpdateRequest;
import com.reffueld.client.model.CoupontTypeCreateRequest;
import org.joda.time.DateTime;
import com.reffueld.client.model.InlineResponse400;
import com.reffueld.client.model.InlineResponse401;
import com.reffueld.client.model.InlineResponse403;
import com.reffueld.client.model.InlineResponse404;
import com.reffueld.client.model.InlineResponse409;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CouponTypeApi {
    private ApiClient apiClient;

    public CouponTypeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CouponTypeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for cancelCouponType */
    private com.squareup.okhttp.Call cancelCouponTypeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/coupontype/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKeySecurity" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelCouponTypeValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cancelCouponType(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cancelCouponTypeCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * coupontype
     * @param id Unique ID of the user requested (required)
     * @return CouponTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponTypeResponse cancelCouponType(String id) throws ApiException {
        ApiResponse<CouponTypeResponse> resp = cancelCouponTypeWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * coupontype
     * @param id Unique ID of the user requested (required)
     * @return ApiResponse&lt;CouponTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponTypeResponse> cancelCouponTypeWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = cancelCouponTypeValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<CouponTypeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * coupontype
     * @param id Unique ID of the user requested (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelCouponTypeAsync(String id, final ApiCallback<CouponTypeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelCouponTypeValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponTypeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createCouponType */
    private com.squareup.okhttp.Call createCouponTypeCall(CoupontTypeCreateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/coupontype".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKeySecurity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCouponTypeValidateBeforeCall(CoupontTypeCreateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createCouponType(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createCouponTypeCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * coupontype
     * @param body CouponType object (required)
     * @return CouponTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponTypeResponse createCouponType(CoupontTypeCreateRequest body) throws ApiException {
        ApiResponse<CouponTypeResponse> resp = createCouponTypeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * coupontype
     * @param body CouponType object (required)
     * @return ApiResponse&lt;CouponTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponTypeResponse> createCouponTypeWithHttpInfo(CoupontTypeCreateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createCouponTypeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CouponTypeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * coupontype
     * @param body CouponType object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCouponTypeAsync(CoupontTypeCreateRequest body, final ApiCallback<CouponTypeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCouponTypeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponTypeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCouponTypeById */
    private com.squareup.okhttp.Call getCouponTypeByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/coupontype/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKeySecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCouponTypeByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCouponTypeById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCouponTypeByIdCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * coupontype
     * @param id Unique ID of the user requested (required)
     * @return CouponTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponTypeResponse getCouponTypeById(String id) throws ApiException {
        ApiResponse<CouponTypeResponse> resp = getCouponTypeByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * coupontype
     * @param id Unique ID of the user requested (required)
     * @return ApiResponse&lt;CouponTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponTypeResponse> getCouponTypeByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getCouponTypeByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<CouponTypeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * coupontype
     * @param id Unique ID of the user requested (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCouponTypeByIdAsync(String id, final ApiCallback<CouponTypeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCouponTypeByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponTypeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCouponTypes */
    private com.squareup.okhttp.Call getCouponTypesCall(String tag, DateTime createdBefore, DateTime createdAfter, DateTime expiryBefore, DateTime expiryAfter, String fromRole, String toRole, Integer issuedCountLt, Integer issuedCountGt, Integer limit, Integer offset, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/coupontype".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tag != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tag", tag));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "created_before", createdBefore));
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "created_after", createdAfter));
        if (expiryBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "expiry_before", expiryBefore));
        if (expiryAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "expiry_after", expiryAfter));
        if (fromRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from_role", fromRole));
        if (toRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to_role", toRole));
        if (issuedCountLt != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "issued_count_lt", issuedCountLt));
        if (issuedCountGt != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "issued_count_gt", issuedCountGt));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKeySecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCouponTypesValidateBeforeCall(String tag, DateTime createdBefore, DateTime createdAfter, DateTime expiryBefore, DateTime expiryAfter, String fromRole, String toRole, Integer issuedCountLt, Integer issuedCountGt, Integer limit, Integer offset, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getCouponTypesCall(tag, createdBefore, createdAfter, expiryBefore, expiryAfter, fromRole, toRole, issuedCountLt, issuedCountGt, limit, offset, cursor, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * coupontype
     * @param tag  (optional)
     * @param createdBefore  (optional)
     * @param createdAfter  (optional)
     * @param expiryBefore  (optional)
     * @param expiryAfter  (optional)
     * @param fromRole  (optional)
     * @param toRole  (optional)
     * @param issuedCountLt  (optional)
     * @param issuedCountGt  (optional)
     * @param limit Number of items returned in the list (optional, default to 10)
     * @param offset Points to the n-th object in the database to start the returned list with (optional)
     * @param cursor A pointer to the first item on the list, returned by the previous query (optional)
     * @return CouponTypeListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponTypeListResponse getCouponTypes(String tag, DateTime createdBefore, DateTime createdAfter, DateTime expiryBefore, DateTime expiryAfter, String fromRole, String toRole, Integer issuedCountLt, Integer issuedCountGt, Integer limit, Integer offset, String cursor) throws ApiException {
        ApiResponse<CouponTypeListResponse> resp = getCouponTypesWithHttpInfo(tag, createdBefore, createdAfter, expiryBefore, expiryAfter, fromRole, toRole, issuedCountLt, issuedCountGt, limit, offset, cursor);
        return resp.getData();
    }

    /**
     * 
     * coupontype
     * @param tag  (optional)
     * @param createdBefore  (optional)
     * @param createdAfter  (optional)
     * @param expiryBefore  (optional)
     * @param expiryAfter  (optional)
     * @param fromRole  (optional)
     * @param toRole  (optional)
     * @param issuedCountLt  (optional)
     * @param issuedCountGt  (optional)
     * @param limit Number of items returned in the list (optional, default to 10)
     * @param offset Points to the n-th object in the database to start the returned list with (optional)
     * @param cursor A pointer to the first item on the list, returned by the previous query (optional)
     * @return ApiResponse&lt;CouponTypeListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponTypeListResponse> getCouponTypesWithHttpInfo(String tag, DateTime createdBefore, DateTime createdAfter, DateTime expiryBefore, DateTime expiryAfter, String fromRole, String toRole, Integer issuedCountLt, Integer issuedCountGt, Integer limit, Integer offset, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = getCouponTypesValidateBeforeCall(tag, createdBefore, createdAfter, expiryBefore, expiryAfter, fromRole, toRole, issuedCountLt, issuedCountGt, limit, offset, cursor, null, null);
        Type localVarReturnType = new TypeToken<CouponTypeListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * coupontype
     * @param tag  (optional)
     * @param createdBefore  (optional)
     * @param createdAfter  (optional)
     * @param expiryBefore  (optional)
     * @param expiryAfter  (optional)
     * @param fromRole  (optional)
     * @param toRole  (optional)
     * @param issuedCountLt  (optional)
     * @param issuedCountGt  (optional)
     * @param limit Number of items returned in the list (optional, default to 10)
     * @param offset Points to the n-th object in the database to start the returned list with (optional)
     * @param cursor A pointer to the first item on the list, returned by the previous query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCouponTypesAsync(String tag, DateTime createdBefore, DateTime createdAfter, DateTime expiryBefore, DateTime expiryAfter, String fromRole, String toRole, Integer issuedCountLt, Integer issuedCountGt, Integer limit, Integer offset, String cursor, final ApiCallback<CouponTypeListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCouponTypesValidateBeforeCall(tag, createdBefore, createdAfter, expiryBefore, expiryAfter, fromRole, toRole, issuedCountLt, issuedCountGt, limit, offset, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponTypeListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for issueCoupons */
    private com.squareup.okhttp.Call issueCouponsCall(String id, CouponTypeIssueRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/coupontype/{id}/issue".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKeySecurity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call issueCouponsValidateBeforeCall(String id, CouponTypeIssueRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling issueCoupons(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling issueCoupons(Async)");
        }
        
        
        com.squareup.okhttp.Call call = issueCouponsCall(id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * coupontype
     * @param id Unique ID of the user requested (required)
     * @param body Unique ID of the coupon type (required)
     * @return CodeListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CodeListResponse issueCoupons(String id, CouponTypeIssueRequest body) throws ApiException {
        ApiResponse<CodeListResponse> resp = issueCouponsWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * 
     * coupontype
     * @param id Unique ID of the user requested (required)
     * @param body Unique ID of the coupon type (required)
     * @return ApiResponse&lt;CodeListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CodeListResponse> issueCouponsWithHttpInfo(String id, CouponTypeIssueRequest body) throws ApiException {
        com.squareup.okhttp.Call call = issueCouponsValidateBeforeCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<CodeListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * coupontype
     * @param id Unique ID of the user requested (required)
     * @param body Unique ID of the coupon type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call issueCouponsAsync(String id, CouponTypeIssueRequest body, final ApiCallback<CodeListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = issueCouponsValidateBeforeCall(id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CodeListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateCouponType */
    private com.squareup.okhttp.Call updateCouponTypeCall(String id, CouponTypeUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/coupontype/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKeySecurity" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCouponTypeValidateBeforeCall(String id, CouponTypeUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCouponType(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCouponType(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateCouponTypeCall(id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * coupontype
     * @param id Unique ID of the user requested (required)
     * @param body CouponType object (required)
     * @return CouponTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponTypeResponse updateCouponType(String id, CouponTypeUpdateRequest body) throws ApiException {
        ApiResponse<CouponTypeResponse> resp = updateCouponTypeWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * 
     * coupontype
     * @param id Unique ID of the user requested (required)
     * @param body CouponType object (required)
     * @return ApiResponse&lt;CouponTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponTypeResponse> updateCouponTypeWithHttpInfo(String id, CouponTypeUpdateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateCouponTypeValidateBeforeCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<CouponTypeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * coupontype
     * @param id Unique ID of the user requested (required)
     * @param body CouponType object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCouponTypeAsync(String id, CouponTypeUpdateRequest body, final ApiCallback<CouponTypeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCouponTypeValidateBeforeCall(id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponTypeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
